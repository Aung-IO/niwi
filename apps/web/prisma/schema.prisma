//ðŸ§©Don't Edit this file.âœ¨Generated in Tue Jul 30 2024 15:00:33 GMT+0700 (Indochina Time)âœ¨

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum BlogReactionType {
  HEART
  THUMB_UP
  THUMB_DOWN
}

model Blog {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  slug         String  @unique
  title        String
  subTitle     String?
  content      String
  contentJson  String
  isPublished  Boolean @default(false)
  previewImage String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @db.ObjectId

  // Blog Comments
  blogComments BlogComment[]

  // Blog Reactions
  reactions   BlogReactions @relation(fields: [reactionsId], references: [id])
  reactionsId String        @unique @db.ObjectId

  // Blog has many user reactions
  userBlogReaction UserBlogReaction[]

  // Blog Bookmarks
  blogBookmarks UserBlogBookmark[]

  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogComment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  blog    Blog   @relation(fields: [blogId], references: [id])
  blogId  String @db.ObjectId

  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogReactions {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  heart      Int    @default(0)
  thumbsUp   Int    @default(0)
  thumbsDown Int    @default(0)
  Blog       Blog?
}

model UserBlogReaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // User React Blog
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // User React to Blog ID
  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String @db.ObjectId

  // User react 
  reaction BlogReactionType

  @@unique([userId, blogId, reaction])
}

model UserBlogBookmark {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // User Bookmark Blog
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // User bookmarked Blog
  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String @db.ObjectId

  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, blogId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String?  @unique
  image String
  role  UserRole
  salt  String

  // Profile
  shortLink     String      @unique
  profile       UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String      @unique @db.ObjectId

  // Password
  password      String
  resetPassword String?

  // Magic
  magicLink String?

  // Other Oauth
  githubId   String? @unique
  facebookId String? @unique
  twitterId  String? @unique

  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // -------------
  // Relationships
  // -------------

  // blog.prisma
  blogs             Blog[]
  blogComments      BlogComment[] // New field to track user comments
  userBlogReactions UserBlogReaction[] // New field to track user reactions
  userBookmarks     UserBlogBookmark[] // New field to track user bookmarks
  // end 
}

model UserProfile {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  aboutMe         String
  backgroundImage String
  statusMessage   String
  gridProfile     Json
  User            User?
}
