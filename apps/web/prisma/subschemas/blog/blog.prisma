enum BlogReactionType {
    HEART
    THUMB_UP
    THUMB_DOWN
}

model Blog {
    id           String  @id @default(auto()) @map("_id") @db.ObjectId
    slug         String  @unique
    title        String
    subTitle     String?
    content      String
    contentJson  String
    isPublished  Boolean @default(false)
    previewImage String?
    user         User    @relation(fields: [userId], references: [id])
    userId       String  @db.ObjectId

    // Blog Comments
    blogComments BlogComment[]

    // Blog Reactions
    reactions   BlogReactions @relation(fields: [reactionsId], references: [id])
    reactionsId String        @unique @db.ObjectId

    // Blog has many user reactions
    userBlogReaction UserBlogReaction[]

    // DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BlogComment {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    content String
    user    User   @relation(fields: [userId], references: [id])
    userId  String @db.ObjectId
    blog    Blog   @relation(fields: [blogId], references: [id])
    blogId  String @db.ObjectId

    // DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BlogReactions {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    heart      Int    @default(0)
    thumbsUp   Int    @default(0)
    thumbsDown Int    @default(0)
    Blog       Blog?
}

model UserBlogReaction {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    // User React Blog
    user   User   @relation(fields: [userId], references: [id])
    userId String @db.ObjectId

    // User React to Blog ID
    blog   Blog   @relation(fields: [blogId], references: [id])
    blogId String @db.ObjectId

    // User react 
    reaction BlogReactionType

    @@unique([userId, blogId, reaction])
}
